// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Friendship {
//   userId   String
//   user   User   @relation("friendOf", fields: [friendId], references: [id])
//   friendId String
//   friend   User   @relation("friends", fields: [friendId], references: [id])

//   @@id([userId, friendId]) // Composite primary key ensures uniqueness
// }

model Friendship {
  id       String @id @default(nanoid())
  userId   String
  user     User   @relation("friendOf", fields: [userId], references: [id])
  freindId String
  friend   User   @relation("friends", fields: [freindId], references: [id])

  @@unique([userId, freindId])
}

// ? Do we even need this?
enum FreindRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FreindRequest {
  id         String              @id @default(nanoid())
  sender     User                @relation("SentRequests", fields: [senderId], references: [id])
  senderId   String
  reciever   User                @relation("RecievedRequests", fields: [recieverId], references: [id])
  recieverId String
  status     FreindRequestStatus @default(PENDING)

  @@unique([senderId, recieverId])
}

model User {
  // Public info
  id          String @id @default(nanoid())
  username    String @unique
  displayName String

  // Private info
  password     String
  email        String
  phone_number Int?

  // Messages
  messages Message[] @relation("UserMessages")

  // Friends
  friends          Friendship[]    @relation("friends")
  friendOf         Friendship[]    @relation("friendOf")
  sentRequests     FreindRequest[] @relation("SentRequests")
  recievedRequests FreindRequest[] @relation("RecievedRequests")
}

model Message {
  id        String   @id @default(nanoid())
  message   String
  userId    String
  messenger User     @relation(fields: [userId], references: [id], name: "UserMessages")
  createdAt DateTime @default(now())
}
